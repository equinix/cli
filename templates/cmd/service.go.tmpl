package cmd

import (
	"fmt"
	"os"

	"github.com/equinix/cli/internal/{{SERVICE}}"
	"github.com/equinix/cli/internal/register"
	"github.com/spf13/cobra"
)

// {{SERVICE}}Cmd represents the {{SERVICE}} command
var {{SERVICE}}Cmd = &cobra.Command{
	Use:   "{{SERVICE}}",
	Short: "Manage Equinix {{SERVICE_DISPLAY}} resources",
	Long: `Commands for managing Equinix {{SERVICE_DISPLAY}} resources.

The {{SERVICE}} commands are dynamically generated based on the {{SERVICE_DISPLAY}} API client,
providing access to all available API services.`,
	PersistentPreRun: func(_ *cobra.Command, _ []string) {
		// Ensure client is initialized when actually running commands
		// This validates credentials before execution
		_, err := {{SERVICE}}.NewClient()
		if err != nil {
			fmt.Fprintf(os.Stderr, "Error initializing {{SERVICE_DISPLAY}} client: %v\n", err)
			fmt.Fprintln(os.Stderr, "\nPlease ensure the following are set:")
			fmt.Fprintln(os.Stderr, "  - EQUINIX_CLIENT_ID environment variable")
			fmt.Fprintln(os.Stderr, "  - EQUINIX_CLIENT_SECRET environment variable")
			fmt.Fprintln(os.Stderr, "\nOr in your config file (~/.config/equinix/equinix.yaml):")
			fmt.Fprintln(os.Stderr, "  equinix_client_id: your-client-id")
			fmt.Fprintln(os.Stderr, "  equinix_client_secret: your-client-secret")
			os.Exit(1)
		}
	},
}

func init() {
	rootCmd.AddCommand({{SERVICE}}Cmd)

	// Register commands at init time for help/discovery
	// We use a discovery client that doesn't require credentials for structure introspection
	// Actual API calls will validate credentials at runtime
	client, err := {{SERVICE}}.NewClientForDiscovery()
	if err != nil {
		// If we can't even create a discovery client, log a warning but continue
		// Commands won't be available but the CLI won't crash
		fmt.Fprintf(os.Stderr, "Warning: Could not register {{SERVICE}} commands: %v\n", err)
		return
	}

	// Register all service commands dynamically
	err = register.ServiceCommands({{SERVICE}}Cmd, client, "{{SERVICE}}")
	if err != nil {
		fmt.Fprintf(os.Stderr, "Warning: Failed to register {{SERVICE}} commands: %v\n", err)
	}

	// Uncomment and customize aliases as needed for convenience
	// Example: Add shorter aliases for commonly used commands
	// {{SERVICE}}Cmd.Aliases = []string{"{{SERVICE_ALIAS}}"}
	// 
	// Or add aliases to specific subcommands after registration:
	// if connectionsCmd, _, err := {{SERVICE}}Cmd.Find([]string{"connections"}); err == nil {
	//     if createCmd, _, err := connectionsCmd.Find([]string{"create-connection"}); err == nil {
	//         createCmd.Aliases = []string{"create"}
	//     }
	// }
}

// GetServices returns information about all available {{SERVICE_DISPLAY}} services
// This can be useful for documentation or introspection
func GetServices() ([]register.ServiceInfo, error) {
	client, err := {{SERVICE}}.NewClient()
	if err != nil {
		return nil, err
	}

	return register.GetServiceList(client)
}
